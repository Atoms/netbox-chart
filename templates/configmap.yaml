apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "netbox.fullname" . }}
  labels:
{{ include "netbox.labels" . | indent 4 }}
data:
  configuration.py: |
    import re
    import yaml

    def _load_yaml():
      with open('/run/config/netbox/netbox.yaml', 'r') as f:
        config = yaml.safe_load(f)

      globals().update(config)

    def _load_secret(name, key):
      path = "/run/secrets/{name}/{key}".format(name=name, key=key)
      with open(path, 'r') as f:
        return f.read()

    _load_yaml()

    DATABASE['PASSWORD'] = _load_secret(
      {{- if .Values.postgresql.enabled -}}
      'database', 'postgresql-password'
      {{- else -}}
      {{- if .Values.externalDatabase.existingSecretName -}}
      'database', {{ .Values.externalDatabase.existingSecretKey | squote }}
      {{- else -}}
      'netbox', 'db_password'
      {{- end -}}
      {{- end -}})
    NAPALM_PASSWORD = _load_secret('netbox', 'napalm_password')
    REDIS['tasks']['PASSWORD'] = _load_secret(
      {{- if .Values.redis.enabled -}}
      'redis', 'redis-password'
      {{- else -}}
      {{- if .Values.tasksRedis.existingSecretName -}}
      'redis_tasks', {{ .Values.tasksRedis.existingSecretKey | squote }}
      {{- else -}}
      'netbox', 'redis_tasks_password'
      {{- end -}}
      {{- end -}})
    REDIS['caching']['PASSWORD'] = _load_secret(
      {{- if .Values.redis.enabled -}}
      'redis', 'redis-password'
      {{- else -}}
      {{- if .Values.cachingRedis.existingSecretName -}}
      'redis_caching', {{ .Values.cachingRedis.existingSecretKey | squote }}
      {{- else -}}
      'netbox', 'redis_cache_password'
      {{- end -}}
      {{- end -}})
    SECRET_KEY = _load_secret('netbox', 'secret_key')

    # Post-process certain values
    CORS_ORIGIN_REGEX_WHITELIST = [re.compile(r) for r
                                   in CORS_ORIGIN_REGEX_WHITELIST]
    {{- if and (not .Values.redis.enabled) .Values.tasksRedis.sentinels }}
    REDIS['tasks']['SENTINELS'] = [tuple(x.split(r":")) for x
                                   in REDIS['tasks']['SENTINELS']]
    {{- end }}
    {{- if and (not .Values.redis.enabled) .Values.cachingRedis.sentinels }}
    REDIS['caching']['SENTINELS'] = [tuple(x.split(r":")) for x
                                     in REDIS['caching']['SENTINELS']]
    {{- end }}

  netbox.yaml: |
    ALLOWED_HOSTS: {{ toJson .Values.allowedHosts }}

    DATABASE:
      {{ if .Values.postgresql.enabled -}}
      HOST: {{ include "netbox.postgresql.fullname" . | quote }}
      USER: {{ .Values.postgresql.postgresqlUsername | quote }}
      NAME: {{ .Values.postgresql.postgresqlDatabase | quote }}
      PORT: {{ .Values.postgresql.service.port | int }}
      {{- else -}}
      HOST: {{ .Values.externalDatabase.host | quote }}
      USER: {{ .Values.externalDatabase.username | quote }}
      NAME: {{ .Values.externalDatabase.database | quote }}
      PORT: {{ .Values.externalDatabase.port | int }}
      {{- end }}
      OPTIONS:
        sslmode: {{ .Values.externalDatabase.sslMode | quote }}
      CONN_MAX_AGE: {{ .Values.externalDatabase.connMaxAge | int }}

    ADMINS: {{ toJson .Values.admins }}
    ALLOWED_URL_SCHEMES: {{ toJson .Values.allowedUrlSchemes }}
    BANNER_TOP: {{ .Values.banner.top | quote }}
    BANNER_BOTTOM: {{ .Values.banner.bottom | quote }}
    BANNER_LOGIN: {{ .Values.banner.login | quote }}
    BASE_PATH: {{ .Values.basePath | quote }}
    CACHE_TIMEOUT: {{ int .Values.cacheTimeout }}
    CHANGELOG_RETENTION: {{ int .Values.changelogRetention }}
    CORS_ORIGIN_ALLOW_ALL: {{ toJson .Values.cors.originAllowAll }}
    CORS_ORIGIN_WHITELIST: {{ toJson .Values.cors.originWhitelist }}
    CORS_ORIGIN_REGEX_WHITELIST: {{ toJson .Values.cors.originRegexWhitelist }}
    DEBUG: {{ toJson .Values.debug }}

    EMAIL:
      SERVER: {{ .Values.email.server | quote }}
      PORT: {{ .Values.email.port | int }}
      USERNAME: {{ .Values.email.username | quote }}
      USE_SSL: {{ toJson .Values.email.useSSL }}
      USE_TLS: {{ toJson .Values.email.useTLS }}
      TIMEOUT: {{ .Values.email.timeout | int }}
      FROM_EMAIL: {{ toJson .Values.email.from }}

    ENFORCE_GLOBAL_UNIQUE: {{ toJson .Values.enforceGlobalUnique }}
    EXEMPT_VIEW_PERMISSIONS: {{ toJson .Values.exemptViewPermissions }}
    HTTP_PROXIES: {{ toJson .Values.httpProxies }}
    INTERNAL_IPS: {{ toJson .Values.internalIPs }}
    LOGGING: {{ toJson .Values.logging }}
    LOGIN_REQUIRED: {{ toJson .Values.loginRequired }}
    LOGIN_TIMEOUT: {{ int .Values.loginTimeout }}
    MAINTENANCE_MODE: {{ toJson .Values.maintenanceMode }}
    MAX_PAGE_SIZE: {{ int .Values.maxPageSize }}
    MEDIA_ROOT: /opt/netbox/netbox/media
    STORAGE_BACKEND: {{ .Values.storageBackend | quote }}
    STORAGE_CONFIG:  {{ toJson .Values.storageConfig }}
    METRICS_ENABLED: {{ toJson .Values.metricsEnabled }}
    NAPALM_USERNAME: {{ .Values.napalm.username | quote }}
    NAPALM_TIMEOUT: {{ int .Values.napalm.timeout }}
    NAPALM_ARGS: {{ toJson .Values.napalm.args }}
    PAGINATE_COUNT: {{ int .Values.paginateCount }}
    PLUGINS: {{ toJson .Values.plugins }}
    PLUGINS_CONFIG: {{ toJson .Values.pluginsConfig }}
    PREFER_IPV4: {{ toJson .Values.preferIPv4 }}
    RACK_ELEVATION_DEFAULT_UNIT_HEIGHT: {{ int .Values.rackElevationDefaultUnitHeight }}
    RACK_ELEVATION_DEFAULT_UNIT_WIDTH: {{ int .Values.rackElevationDefaultUnitWidth }}
    REMOTE_AUTH_ENABLED: {{ toJson .Values.remoteAuth.enabled }}
    REMOTE_AUTH_BACKEND: {{ .Values.remoteAuth.backend | quote }}
    REMOTE_AUTH_HEADER: {{ .Values.remoteAuth.header | quote }}
    REMOTE_AUTH_AUTO_CREATE_USER: {{ toJson .Values.remoteAuth.autoCreateUser }}
    REMOTE_AUTH_DEFAULT_GROUPS: {{ toJson .Values.remoteAuth.defaultGroups }}
    REMOTE_AUTH_DEFAULT_PERMISSIONS: {{ toJson .Values.remoteAuth.defaultPermissions }}
    RELEASE_CHECK_TIMEOUT: {{ .Values.releaseCheck.timeout | int }}
    RELEASE_CHECK_URL: {{ toJson .Values.releaseCheck.url }}

    REDIS:
      tasks:
        {{ if .Values.redis.enabled -}}
        HOST: {{ printf "%s-master" (include "netbox.redis.fullname" .) | quote }}
        PORT: {{ .Values.redis.redisPort | int }}
        {{- else if .Values.tasksRedis.sentinels -}}
        SENTINELS: {{ toJson .Values.tasksRedis.sentinels }}
        SENTINEL_SERVICE: {{ .Values.tasksRedis.sentinelService | quote }}
        SENTINEL_TIMEOUT: {{ .Values.tasksRedis.sentinelTimeout | int }}
        {{- else -}}
        HOST: {{ .Values.tasksRedis.host | quote }}
        PORT: {{ .Values.tasksRedis.port | int}}
        {{- end }}
        DATABASE: {{ int .Values.tasksRedis.database }}
        SSL: {{ toJson .Values.tasksRedis.ssl }}
      caching:
        {{ if .Values.redis.enabled -}}
        HOST: {{ printf "%s-master" (include "netbox.redis.fullname" .) | quote }}
        PORT: {{ .Values.redis.redisPort | int }}
        {{- else if .Values.cachingRedis.sentinels -}}
        SENTINELS: {{ toJson .Values.cachingRedis.sentinels }}
        SENTINEL_SERVICE: {{ .Values.cachingRedis.sentinelService | quote }}
        SENTINEL_TIMEOUT: {{ .Values.cachingRedis.sentinelTimeout | int }}
        {{- else -}}
        HOST: {{ .Values.cachingRedis.host | quote }}
        PORT: {{ .Values.cachingRedis.port | int}}
        {{- end }}
        DATABASE: {{ int .Values.cachingRedis.database }}
        SSL: {{ toJson .Values.cachingRedis.ssl }}

    REPORTS_ROOT: /opt/netbox/netbox/reports
    RQ_DEFAULT_TIMEOUT: {{ .Values.rqDefaultTimeout | int }}
    SCRIPTS_ROOT: /opt/netbox/netbox/scripts
    TIME_ZONE: {{ .Values.timeZone | quote }}
    DATE_FORMAT: {{ .Values.dateFormat | quote }}
    SHORT_DATE_FORMAT: {{ .Values.shortDateFormat | quote }}
    TIME_FORMAT: {{ .Values.timeFormat | quote }}
    SHORT_TIME_FORMAT: {{ .Values.shortTimeFormat | quote }}
    DATETIME_FORMAT: {{ .Values.dateTimeFormat | quote }}
    SHORT_DATETIME_FORMAT: {{ .Values.shortDateTimeFormat | quote }}
